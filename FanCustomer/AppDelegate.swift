//
//  AppDelegate.swift
//  FanCustomer
//
//  Created by Codiant on 11/9/17.
//  Copyright Â© 2017 Codiant. All rights reserved.
//

import Siren
import UIKit
import UserNotifications
import IQKeyboardManagerSwift
import GoogleMaps
import Reachability

let appDelegate = UIApplication.shared.delegate as! AppDelegate

@UIApplicationMain
class AppDelegate: UIResponder, UIApplicationDelegate, UNUserNotificationCenterDelegate {

    var window: UIWindow?
    private var isBackgroundNotification = false
    private let reachability = Reachability()!
    
    @objc dynamic var networkReachable = false
    
    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -> Bool {
        //Siren.shared.wail() // Line 2
        initialSetup {
            if let notification = launchOptions?[UIApplicationLaunchOptionsKey.remoteNotification] as? [AnyHashable: Any] {
                self.handleNotificationOnPreset(with: notification)
            }
        }
        return true
    }

    func applicationWillResignActive(_ application: UIApplication) {
        // Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state.
        // Use this method to pause ongoing tasks, disable timers, and invalidate graphics rendering callbacks. Games should use this method to pause the game.
        isBackgroundNotification = false
    }

    func applicationDidEnterBackground(_ application: UIApplication) {
        // Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later.
        // If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits.
    }

    func applicationWillEnterForeground(_ application: UIApplication) {
        // Called as part of the transition from the background to the active state; here you can undo many of the changes made on entering the background.
        isBackgroundNotification = true
    }

    func applicationDidBecomeActive(_ application: UIApplication) {
        // Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface.
        isBackgroundNotification = false
    }

    func applicationWillTerminate(_ application: UIApplication) {
        // Called when the application is about to terminate. Save data if appropriate. See also applicationDidEnterBackground:.
        if !LoggedInUser.shared.isRegistered {
            LoggedInUser.shared.clear()
        }
    }
    //  MARK:- User Notifications
    private func registerForPushNotifications() {
        
        UNUserNotificationCenter.current().delegate = self
        
        // Register only when device token not generated by app yet
        guard Validator.emptyString(LoggedInUser.deviceToken) else {
            DDLogDebug("Pre-generated Device Token: \(LoggedInUser.deviceToken)")
            return
        }
        
        UNUserNotificationCenter.current().requestAuthorization(options: [.alert, .sound, .badge]) {
            (granted, error) in
            guard error == nil, granted else {
                DDLogDebug("User Notifications: Permission not granted")
                return
            }
            
            self.getNotificationSettings()
        }
    }
    
    private func getNotificationSettings() {
        
        UNUserNotificationCenter.current().getNotificationSettings { (settings) in
            guard settings.authorizationStatus == .authorized else { return }
            
            DispatchQueue.main.async {
                UIApplication.shared.registerForRemoteNotifications()
            }
        }
    }
    
    func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {
        let tokenParts = deviceToken.map { data -> String in
            return String(format: "%02.2hhx", data)
        }
        
        LoggedInUser.deviceToken = tokenParts.joined()
        DDLogDebug("Device Token: \(LoggedInUser.deviceToken)")
    }
    
    func application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {
        DDLogError("User Notifications failed to register: \(error)")
    }
    
    func userNotificationCenter(_ center: UNUserNotificationCenter, willPresent notification: UNNotification, withCompletionHandler completionHandler: @escaping (UNNotificationPresentationOptions) -> Void) {
        let userInfo = notification.request.content.userInfo
        print("\(userInfo)")
        self.handleNotification(with: userInfo, isBackground: true)
        completionHandler([.badge, .sound])
    }
    
    func userNotificationCenter(_ center: UNUserNotificationCenter, didReceive response: UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -> Void) {
        let userInfo = response.notification.request.content.userInfo
        // If application state is background and is come by click on notification isBackgroundNotification = true
        self.handleNotification(with: userInfo, isBackground: isBackgroundNotification)
        completionHandler()
    }
    
    private func handleNotification(with userInfo: [AnyHashable: Any], isBackground: Bool) {
        if isBackground {
         guard UserDefaults.standard.bool(forKey: "UserLoggedIn"),
            let topController = UIViewController.topViewController() else {
                return
        }
        
        if let notificationType = userInfo["type"] as? String {
            if let count = userInfo["unread_notification_count"] as? NSNumber {
                LoggedInUser.getUnreadCount = count.stringValue
            }
            else if let count = userInfo["unread_notification_count"] as? String {
                LoggedInUser.getUnreadCount = count
            }
            switch notificationType {
            case "request_accepted":
                guard (topController is HomeVC) else {
                    return
                }
                NotificationCenter.default.post(name: NSNotification.Name(rawValue: "ORDER_REQUEST_ACCEPTED"), object: nil , userInfo: userInfo)
                break
            case "cancel_session_by_photographer":
                guard (topController is TrackingVC) || (topController is ChatVC) || (topController is StartShootVC) else {
                    return
                }
                guard TimerOperation.bookingStatus == OrderStatus.Proceed.rawValue || TimerOperation.bookingStatus == OrderStatus.Pending.rawValue else {
                    return
                }
                
                if (topController is ChatVC) || (topController is StartShootVC) {
                    topController.navigationController?.popViewController(animated: true)
                }
                
                DispatchQueue.main.asyncAfter(deadline: .now() + ((topController is TrackingVC) ? 0.0 : 0.2)) {
                    NotificationCenter.default.post(name: NSNotification.Name(rawValue: "ORDER_REQUEST_CANCEL"), object: nil, userInfo: userInfo)
                }
                break
            case "start_time_request_approve":
                guard (topController is StartShootVC) else {
                    return
                }
                NotificationCenter.default.post(name: NSNotification.Name(rawValue: "ORDER_REQUEST_PROCEED"), object: nil, userInfo: userInfo)
                break
            case "new_message":
                guard (topController is TrackingVC) || (topController is ChatVC) else {
                    return
                }
                
                if (topController is TrackingVC) {
                    NotificationCenter.default.post(name: NSNotification.Name(rawValue: "ORDER_REQUEST_CANCEL"), object: nil, userInfo: userInfo)
                } else {
                   NotificationCenter.default.post(name: NSNotification.Name(rawValue: "NEW_MESSAGE"), object: nil, userInfo: userInfo)
                }
                break
            default:
                break
            }
         }
      }
    }
    
    private func handleNotificationOnPreset(with userInfo: [AnyHashable: Any]) {
        guard let topController = UIViewController.topViewController(), !(topController is UIAlertController) else {
            return
        }
        if let notificationType = userInfo["type"] as? String {
            if let count = userInfo["unread_notification_count"] as? NSNumber {
                LoggedInUser.getUnreadCount = count.stringValue
            }
            else if let count = userInfo["unread_notification_count"] as? String {
                LoggedInUser.getUnreadCount = count
            }
            let runningOrder = PhotographerProfile.currentOrder
            guard runningOrder.orderId != nil else {
                return
            }
            if runningOrder.orderId == (userInfo["order_id"] as! String) {
                switch notificationType {
                    case "cancel_session_by_photographer", "new_message":
                    if TimerOperation.bookingStatus == OrderStatus.Proceed.rawValue {
                        guard (topController is TrackingVC) else {
                            return
                        }
                        DispatchQueue.main.asyncAfter(deadline: .now() + 0.2) {
                            NotificationCenter.default.post(name: NSNotification.Name(rawValue: "ORDER_REQUEST_CANCEL"), object: nil, userInfo: userInfo)
                        }
                    }
                    break
                    case "start_time_request_approve":
                    if TimerOperation.bookingStatus == OrderStatus.Pending.rawValue || TimerOperation.bookingStatus == OrderStatus.Running.rawValue {
                        guard (topController is StartShootVC) else {
                            return
                        }
                        NotificationCenter.default.post(name: NSNotification.Name(rawValue: "ORDER_REQUEST_PROCEED"), object: nil, userInfo: userInfo)
                    }
                    break
                default:
                    break
                }
            }
        }
    }
    // MARK: Private Methods
    private func initialSetup(handler: @escaping() -> Void) {
        // Network Reachability
        reachability.whenReachable = { _ in
            self.networkReachable = true
            DDLogDebug("Internet reachable")
        }
        
        reachability.whenUnreachable = { _ in
            self.networkReachable = false
            DDLogDebug("Internet not reachable")
        }
        
        do { try reachability.startNotifier() }
        catch { DDLogDebug("Unable to start reachability notifier") }
        
        UIApplication.shared.statusBarStyle = .lightContent
        // Configure IQKeyboardManager
        IQKeyboardManager.sharedManager().enable = true
        IQKeyboardManager.sharedManager().shouldResignOnTouchOutside = true
        IQKeyboardManager.sharedManager().shouldPlayInputClicks = true
        IQKeyboardManager.sharedManager().toolbarTintColor = Color.ultraBlue
        IQKeyboardManager.sharedManager().toolbarDoneBarButtonItemImage = #imageLiteral(resourceName: "icn_keyboardDismiss")
        IQKeyboardManager.sharedManager().shouldShowToolbarPlaceholder = false
        
        // Initialize GoogleMap services.
        GMSServices.provideAPIKey("AIzaSyCLKNY8Y4_ndm31vmciEgzHsPziYZAhGcU")
        
        // Configure CocoaLumberjack
        DDLog.add(DDTTYLogger.sharedInstance)
        
        #if DEBUG
            defaultDebugLevel = .debug
        #else
            defaultDebugLevel = .error
        #endif
        
        registerForPushNotifications()
        
        if LoggedInUser.shared.checkLastUserSession() {
            
            if LoggedInUser.shared.isRegistered {
                Profile.shared.syncUserInfo()
                // Set root as side menu
                AppDelegate.setRootViewConroller {
                   handler()
                }
            } else {
                LoggedInUser.shared.clear()
            }
        }
    }
    
    // MARK: - Navigation window operation
    
    class func setRootViewConroller(handler: @escaping() -> Void) {
        let storyboard = UIStoryboard(name: "Main", bundle: nil)
        let root = storyboard.instantiateViewController(withIdentifier: "RootVC") as? RootVC
        appDelegate.window?.rootViewController = nil;
        appDelegate.window?.rootViewController = root;
        UIView.transition(with: appDelegate.window!, duration: 0.3, options: .transitionCrossDissolve, animations: nil, completion: {_ in
            
            guard let topController = UIViewController.topViewController(), !(topController is UIAlertController), (topController is HomeVC) else {
                return
            }
            let mainStoryboard: UIStoryboard = UIStoryboard(name: "Main", bundle: nil)
            if TimerOperation.bookingStatus == OrderStatus.Proceed.rawValue {
                if let trackingVC = mainStoryboard.viewController(withClass: TrackingVC.self) {
                    trackingVC.bookingInfo = PhotographerProfile.currentOrder
                    topController.push(trackingVC)
                }
            } else if TimerOperation.bookingStatus == OrderStatus.Pending.rawValue || TimerOperation.bookingStatus == OrderStatus.Running.rawValue {
                if let startShootVC = mainStoryboard.viewController(withClass: StartShootVC.self) {
                    startShootVC.bookingInfo = PhotographerProfile.currentOrder
                    topController.push(startShootVC)
                }
            }
            handler()
        })
    }

    class func setHomeViewConroller() {
        // Load new root
        let storyboard = UIStoryboard(name: "Main", bundle: nil)
        let root = storyboard.instantiateViewController(withIdentifier: "initialNavBar") as? UINavigationController
        appDelegate.window?.rootViewController = nil;
        appDelegate.window?.rootViewController = root;
        UIView.transition(with: appDelegate.window!, duration: 0.3, options: .transitionCrossDissolve, animations: nil, completion: {_ in
            CardManager.shared.cardsFirstFetch = false
            LoggedInUser.shared.clear()
        })
    }
}

//private extension AppDelegate {
//    
//    /// The simplest implementation of Siren.
//    /// All default rules are implemented and the
//    /// results of the completion handler are ignored.
//    func defaultExample() {
//        //Siren.shared.wail()
//    }
//    
//    /// The simplest implementation of Siren.
//    /// All default rules are implemented and the
//    /// results of the completion handler are returned or an error is returned.
//    func defaultExampleUsingCompletionHandler() {
//        Siren.shared.wail { (results, error) in
//            if let results = results {
//                print("AlertAction ", results.alertAction)
//                print("Localization ", results.localization)
//                print("LookupModel ", results.lookupModel)
//                print("UpdateType ", results.updateType)
//            } else if let error = error {
//                print(error.localizedDescription)
//            }
//        }
//    }
//}
